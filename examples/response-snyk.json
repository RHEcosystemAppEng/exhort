{
    "issues": [
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-IONETTY-1042268",
            "pkgName": "io.netty:netty-handler",
            "pkgVersion": "4.1.82.Final"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-IONETTY-3167776",
            "pkgName": "io.netty:netty-codec-haproxy",
            "pkgVersion": "4.1.82.Final"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-IOQUARKUS-3149918",
            "pkgName": "io.quarkus:quarkus-vertx-http",
            "pkgVersion": "2.13.5.Final"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-IOQUARKUS-3330765",
            "pkgName": "io.quarkus:quarkus-vertx-http",
            "pkgVersion": "2.13.5.Final"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-IOVERTX-3318108",
            "pkgName": "io.vertx:vertx-web",
            "pkgVersion": "4.3.4"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-ORGJBOSSRESTEASY-3338627",
            "pkgName": "org.jboss.resteasy:resteasy-core",
            "pkgVersion": "4.7.7.Final"
        },
        {
            "fixInfo": {},
            "issueId": "SNYK-JAVA-ORGPOSTGRESQL-3146847",
            "pkgName": "org.postgresql:postgresql",
            "pkgVersion": "42.5.0"
        }
    ],
    "issuesData": {
        "SNYK-JAVA-IONETTY-1042268": {
            "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:R/S:U/C:H/I:L/A:L/E:U/RL:U/RC:R",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [],
            "cvssScore": 5.6,
            "description": "## Overview\n[io.netty:netty-handler](https://github.com/netty/netty.git/netty-handler) is a library that provides an asynchronous event-driven network application framework and tools for rapid development of maintainable high performance and high scalability protocol servers and clients. In other words, Netty is a NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients. It greatly simplifies and streamlines network programming such as TCP and UDP socket server.\nAffected versions of this package are vulnerable to Improper Certificate Validation. Certificate hostname validation is disabled by default in `Netty 4.1.x` which makes it potentially susceptible to Man-in-the-Middle attacks.\n## Remediation\nThere is no fixed version for `io.netty:netty-handler`.\n## References\n- [GitHub Issue 1](https://github.com/netty/netty/issues/10806)\n- [GitHub Issue 2](https://github.com/netty/netty/issues/8537)\n- [GitHub Issue 3](https://github.com/netty/netty/issues/9930)\n- [GitHub Issue 4](https://github.com/netty/netty/issues/10362)\n",
            "disclosureTime": "2020-11-19T07:07:57Z",
            "epssDetails": null,
            "fixedIn": [],
            "id": "SNYK-JAVA-IONETTY-1042268",
            "identifiers": {
                "CVE": [],
                "CWE": [
                    "CWE-295"
                ]
            },
            "insights": {
                "triageAdvice": "This vulnerability is only applicable when certificate hostname validation is disabled."
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "netty-handler",
                "groupId": "io.netty"
            },
            "moduleName": "io.netty:netty-handler",
            "packageManager": "maven",
            "packageName": "io.netty:netty-handler",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[4.1.0.Final,]"
                ]
            },
            "severity": "medium",
            "title": "Improper Certificate Validation"
        },
        "SNYK-JAVA-IONETTY-3167776": {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [
                {
                    "assigner": "Red Hat",
                    "cvssV3BaseScore": 7.5,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "modificationTime": "2023-03-26T14:47:45.440923Z",
                    "severity": "high"
                },
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 7.5,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "modificationTime": "2022-12-20T01:10:53.812897Z",
                    "severity": "high"
                }
            ],
            "cvssScore": 7.5,
            "description": "## Overview\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a stack overflow that can be triggered by a malformed message containing a deeply nested TLV. (The only limitation on such recursion is that the TLV length cannot exceed `0xffff`.)\r\n\r\n**NOTE:** The StackOverflowError is caught if HAProxyMessageDecoder is used as part of Nettyâ€™s ChannelPipeline.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `io.netty:netty-codec-haproxy` to version 4.1.86.Final or higher.\n## References\n- [GitHub Commit](https://github.com/netty/netty/commit/cd91cf3c99123bd1e53fd6a1de0e3d1922f05bb2)\n",
            "disclosureTime": "2022-12-12T21:24:29Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.28829",
                "probability": "0.00071"
            },
            "fixedIn": [
                "4.1.86.Final"
            ],
            "id": "SNYK-JAVA-IONETTY-3167776",
            "identifiers": {
                "CVE": [
                    "CVE-2022-41881"
                ],
                "CWE": [
                    "CWE-674"
                ],
                "GHSA": [
                    "GHSA-fx2c-96vj-985v"
                ]
            },
            "insights": {
                "triageAdvice": null
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "netty-codec-haproxy",
                "groupId": "io.netty"
            },
            "moduleName": "io.netty:netty-codec-haproxy",
            "packageManager": "maven",
            "packageName": "io.netty:netty-codec-haproxy",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[,4.1.86.Final)"
                ]
            },
            "severity": "high",
            "title": "Denial of Service (DoS)"
        },
        "SNYK-JAVA-IOQUARKUS-3149918": {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 7.5,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
                    "modificationTime": "2022-12-13T01:11:40.428400Z",
                    "severity": "high"
                }
            ],
            "cvssScore": 8.2,
            "description": "## Overview\n[io.quarkus:quarkus-vertx-http](https://github.com/quarkusio/quarkus) is a Cloud Native, (Linux) Container First framework for writing Java applications.\nAffected versions of this package are vulnerable to Access Restriction Bypass via the `CORS` filter which allows simple `GET` and `POST` requests with invalid Origin to proceed.\n## Remediation\nUpgrade `io.quarkus:quarkus-vertx-http` to version 2.14.2 or higher.\n## References\n- [GitHub Commit](https://github.com/quarkusio/quarkus/commit/cc26704d3bed46ed1d5caee90f22894952a07182)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2148867)\n",
            "disclosureTime": "2022-11-28T00:00:00Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.37618",
                "probability": "0.00091"
            },
            "fixedIn": [
                "2.14.2"
            ],
            "id": "SNYK-JAVA-IOQUARKUS-3149918",
            "identifiers": {
                "CVE": [
                    "CVE-2022-4147"
                ],
                "CWE": [
                    "CWE-284"
                ]
            },
            "insights": {
                "triageAdvice": null
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "quarkus-vertx-http",
                "groupId": "io.quarkus"
            },
            "moduleName": "io.quarkus:quarkus-vertx-http",
            "packageManager": "maven",
            "packageName": "io.quarkus:quarkus-vertx-http",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[,2.14.2)"
                ]
            },
            "severity": "high",
            "title": "Access Restriction Bypass"
        },
        "SNYK-JAVA-IOQUARKUS-3330765": {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [
                {
                    "assigner": "Red Hat",
                    "cvssV3BaseScore": 5.3,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
                    "modificationTime": "2023-03-26T14:49:36.697430Z",
                    "severity": "medium"
                },
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 6.1,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
                    "modificationTime": "2023-03-04T01:10:10.020882Z",
                    "severity": "medium"
                }
            ],
            "cvssScore": 5.4,
            "description": "## Overview\n[io.quarkus:quarkus-vertx-http](https://github.com/quarkusio/quarkus) is a Cloud Native, (Linux) Container First framework for writing Java applications.\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper user-input sanitization, if the Quarkus Form Authentication session cookie Path attribute is set to `/`.\n\n**Note:** This attack can be prevented with the Quarkus CSRF Prevention feature.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserâ€™s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyâ€™ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userâ€™s browser.| \n|**DOM-based**|Client|The attacker forces the userâ€™s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `io.quarkus:quarkus-vertx-http` to version 2.13.7.Final or higher.\n## References\n- [GitHub Commit](https://github.com/quarkusio/quarkus/commit/47bb512f8c3ff6f1f87df87f0e9761305775fa1b)\n- [GitHub PR](https://github.com/quarkusio/quarkus/pull/30413)\n- [GitHub Release](https://github.com/quarkusio/quarkus/releases/tag/2.13.7.Final)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2158081)\n",
            "disclosureTime": "2023-02-23T21:30:16Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.14595",
                "probability": "0.00048"
            },
            "fixedIn": [
                "2.13.7.Final"
            ],
            "id": "SNYK-JAVA-IOQUARKUS-3330765",
            "identifiers": {
                "CVE": [
                    "CVE-2023-0044"
                ],
                "CWE": [
                    "CWE-79"
                ],
                "GHSA": [
                    "GHSA-c57v-hc7m-8px2"
                ]
            },
            "insights": {
                "triageAdvice": null
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "quarkus-vertx-http",
                "groupId": "io.quarkus"
            },
            "moduleName": "io.quarkus:quarkus-vertx-http",
            "packageManager": "maven",
            "packageName": "io.quarkus:quarkus-vertx-http",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[,2.13.7.Final)"
                ]
            },
            "severity": "medium",
            "title": "Cross-site Scripting (XSS)"
        },
        "SNYK-JAVA-IOVERTX-3318108": {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 5.3,
                    "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
                    "modificationTime": "2023-02-18T01:10:04.002091Z",
                    "severity": "medium"
                }
            ],
            "cvssScore": 4.8,
            "description": "## Overview\n[io.vertx:vertx-web](https://github.com/vert-x3/vertx-web) is a HTTP web applications for Vert.x.\nAffected versions of this package are vulnerable to Directory Traversal when running Vertx web applications that serve files using `StaticHandle`. If the mount point is a wildcard (`*`) then an attacker can exfiltrate any class path resource.\r\n\r\nWhen computing the relative path to locate the resource, in case of wildcards, [the code](https://github.com/vert-x3/vertx-web/blob/62c0d66fa1c179ae6a4d57344631679a2b97e60f/vertx-web/src/main/java/io/vertx/ext/web/impl/Utils.java#L83\r\n) returns the user input (without validation) as the segment to lookup. Even though checks are performed to avoid escaping the sandbox, given that the input was not sanitized, `\\` are not properly handled and an attacker can build a path that is valid within the classpath.\r\n\r\n**Note:** This vulnerability can only be exploited on Windows Operating Systems and Windows File Systems\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `io.vertx:vertx-web` to version 4.3.8 or higher.\n## References\n- [GitHub Commit](https://github.com/vert-x3/vertx-web/commit/8a6b4ef8096a0b8714c1f10ec0133f4b42e48428)\n- [PoC](https://github.com/adrien-aubert-drovio/vertx-statichandler-windows-traversal-path-vulnerability)\n- [Vulnerable Code](https://github.com/vert-x3/vertx-web/blob/62c0d66fa1c179ae6a4d57344631679a2b97e60f/vertx-web/src/main/java/io/vertx/ext/web/impl/Utils.java#L83)\n",
            "disclosureTime": "2023-02-10T03:27:58Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.17888",
                "probability": "0.00051"
            },
            "fixedIn": [
                "4.3.8"
            ],
            "id": "SNYK-JAVA-IOVERTX-3318108",
            "identifiers": {
                "CVE": [
                    "CVE-2023-24815"
                ],
                "CWE": [
                    "CWE-22"
                ],
                "GHSA": [
                    "GHSA-53jx-vvf9-4x38"
                ]
            },
            "insights": {
                "triageAdvice": "This vulnerability is only applicable on Windows operating system"
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "vertx-web",
                "groupId": "io.vertx"
            },
            "moduleName": "io.vertx:vertx-web",
            "packageManager": "maven",
            "packageName": "io.vertx:vertx-web",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[4.0.0,4.3.8)"
                ]
            },
            "severity": "medium",
            "title": "Directory Traversal"
        },
        "SNYK-JAVA-ORGJBOSSRESTEASY-3338627": {
            "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "credit": [
                "Unknown"
            ],
            "cvssDetails": [
                {
                    "assigner": "Red Hat",
                    "cvssV3BaseScore": 5.3,
                    "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
                    "modificationTime": "2023-02-01T14:09:50.914731Z",
                    "severity": "medium"
                },
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 5.5,
                    "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
                    "modificationTime": "2023-03-02T01:10:06.588327Z",
                    "severity": "medium"
                }
            ],
            "cvssScore": 5.3,
            "description": "## Overview\n[org.jboss.resteasy:resteasy-core](https://github.com/resteasy/Resteasy) is a JBoss.org project aimed at providing productivity frameworks for developing client and server RESTful applications and services in Java.\nAffected versions of this package are vulnerable to Creation of Temporary File With Insecure Permissions such that the insecure `File.createTempFile()` which is used in the `DataSourceProvider`, `FileProvider` and `Mime4JWorkaround` classes creates temp files with insecure permissions that could be read by a local user.\n## Remediation\nUpgrade `org.jboss.resteasy:resteasy-core` to version 4.7.8.Final or higher.\n## References\n- [GitHub Commit](https://github.com/resteasy/resteasy/commit/277ea6d15b793b53b170ae9d8f9aba83b82d33c8)\n- [GitHub Release](https://github.com/resteasy/resteasy/releases/tag/4.7.8.Final)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2166004)\n",
            "disclosureTime": "2023-01-31T00:00:00Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.05669",
                "probability": "0.00042"
            },
            "fixedIn": [
                "4.7.8.Final"
            ],
            "id": "SNYK-JAVA-ORGJBOSSRESTEASY-3338627",
            "identifiers": {
                "CVE": [
                    "CVE-2023-0482"
                ],
                "CWE": [
                    "CWE-378"
                ]
            },
            "insights": {
                "triageAdvice": null
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "resteasy-core",
                "groupId": "org.jboss.resteasy"
            },
            "moduleName": "org.jboss.resteasy:resteasy-core",
            "packageManager": "maven",
            "packageName": "org.jboss.resteasy:resteasy-core",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[0,4.7.8.Final)"
                ]
            },
            "severity": "medium",
            "title": "Creation of Temporary File With Insecure Permissions"
        },
        "SNYK-JAVA-ORGPOSTGRESQL-3146847": {
            "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "credit": [
                "Jonathan Leitschuh"
            ],
            "cvssDetails": [
                {
                    "assigner": "SUSE",
                    "cvssV3BaseScore": 5.5,
                    "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
                    "modificationTime": "2023-01-20T11:01:50.803032Z",
                    "severity": "medium"
                },
                {
                    "assigner": "NVD",
                    "cvssV3BaseScore": 5.5,
                    "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
                    "modificationTime": "2022-11-29T01:11:13.876418Z",
                    "severity": "medium"
                },
                {
                    "assigner": "Red Hat",
                    "cvssV3BaseScore": 5.5,
                    "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
                    "modificationTime": "2022-12-15T14:09:22.333400Z",
                    "severity": "medium"
                }
            ],
            "cvssScore": 4.7,
            "description": "## Overview\n[org.postgresql:postgresql](https://mvnrepository.com/artifact/org.postgresql/postgresql) is a Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database.\nAffected versions of this package are vulnerable to Information Exposure in the pgjdbc driver, which writes to the operating system's shared temp directory when the InputStream to either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` is larger than 2K. The temporary file is readable by other users. This is the default system behavior on Unix systems but not on MacOS.\r\n\r\n**NOTE:** This vulnerability is only fixed for JDK 1.7. Systems using JDK 1.6 or below can work around the vulnerability by setting the environment variable `java.io.tmpdir` to a non-world-readable location.\n## Remediation\nUpgrade `org.postgresql:postgresql` to version 42.2.27, 42.3.8, 42.4.3, 42.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/34855cffb9079edf95cf77930f3e3b73f6a1b139)\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/9008dc9aade6dbfe4efafcd6872ebc55f4699cf5)\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/91b8c2ca600f82d2ec47c3fb54ca2036b000e320)\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/e73c6b6b53ff11bc0bd06c44130a880d3bf77c55)\n",
            "disclosureTime": "2022-11-24T08:23:26Z",
            "epssDetails": {
                "modelVersion": "v2023.03.01",
                "percentile": "0.11956",
                "probability": "0.00045"
            },
            "fixedIn": [
                "42.2.27",
                "42.3.8",
                "42.4.3",
                "42.5.1"
            ],
            "id": "SNYK-JAVA-ORGPOSTGRESQL-3146847",
            "identifiers": {
                "CVE": [
                    "CVE-2022-41946"
                ],
                "CWE": [
                    "CWE-200"
                ],
                "GHSA": [
                    "GHSA-562r-vg33-8x8h"
                ]
            },
            "insights": {
                "triageAdvice": null
            },
            "language": "java",
            "mavenModuleName": {
                "artifactId": "postgresql",
                "groupId": "org.postgresql"
            },
            "moduleName": "org.postgresql:postgresql",
            "packageManager": "maven",
            "packageName": "org.postgresql:postgresql",
            "proprietary": false,
            "semver": {
                "vulnerable": [
                    "[42.2.0,42.2.27)",
                    "[42.3.0,42.3.8)",
                    "[42.4.0,42.4.3)",
                    "[42.5.0,42.5.1)"
                ]
            },
            "severity": "medium",
            "title": "Information Exposure"
        }
    },
    "ok": false,
    "org": {
        "id": "bec5d7b5-5168-4b9f-a53f-834f1433437b",
        "name": "rubens-playground"
    },
    "packageManager": "maven"
}
