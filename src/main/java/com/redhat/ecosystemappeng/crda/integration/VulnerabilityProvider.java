/*
 * Copyright 2023 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.redhat.ecosystemappeng.crda.integration;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;

import org.apache.camel.Exchange;
import org.apache.camel.ExchangeProperty;
import org.apache.camel.Header;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import io.quarkus.runtime.annotations.RegisterForReflection;

@ApplicationScoped
@RegisterForReflection
public class VulnerabilityProvider {

    @ConfigProperty(name = "api.snyk.disabled", defaultValue = "false")
    private boolean snykDisabled;

    @ConfigProperty(name = "api.tidelift.disabled", defaultValue = "false")
    private boolean tideliftDisabled;

    private List<String> providers;

    @PostConstruct
    public void initProviders() {
        providers = Collections.unmodifiableList(Constants.PROVIDERS.stream()
                .filter(p -> !(Constants.SNYK_PROVIDER.equals(p) && snykDisabled))
                .filter(p -> !(Constants.TIDELIFT_PROVIDER.equals(p) && tideliftDisabled))
                .toList());
    }

    public String get(@ExchangeProperty(Exchange.MULTICAST_INDEX) int index) {
        return providers.get(index);
    }

    public List<String> getProviderEndpoints(@ExchangeProperty(Constants.PROVIDERS_PARAM) List<String> providers) {
        return providers.stream().map(p -> {
            switch (p) {
                case Constants.SNYK_PROVIDER:
                    return "direct:snykDepGraph";
                case Constants.TIDELIFT_PROVIDER:
                    return "direct:tideliftReleases";
                default:
                    throw new IllegalArgumentException("Unexpected provider: " + p);
            }
        }).collect(Collectors.toList());
    }

    public List<String> getEnabled() {
        return providers;
    }

    public List<String> getProvidersFromQueryParam(@Header(Exchange.HTTP_QUERY) String query) {
        if (query == null || query.trim().isBlank()) {
            return getEnabled();
        }
        String[] params = query.split("&");
        for (int i = 0; i < params.length; i++) {
            if (params[i].startsWith(Constants.PROVIDERS_PARAM)) {
                return List.of(params[i].replace(Constants.PROVIDERS_PARAM + "=", "").split(","));
            }
        }
        return getEnabled();
    }

}
