import { Td, Tr } from '@patternfly/react-table';
import { DependencyLink } from './DependencyLink';
import { RemediationLink } from './RemediationLink';
import { VulnerabilityLink } from './VulnerabilityLink';
import { VulnerabilityScore } from './VulnerabilityScore';
import { VulnerabilitySeverityLabel } from './VulnerabilitySeverityLabel';
import { usePrivateIssueHelper } from "../hooks/usePrivateDataHelper";
import { hasRemediations, VulnerabilityItem } from "../api/report";
import { useAppContext } from '../App';
import { VulnerabilityIdLink } from './VulnerabilityIdLink';
import { VulnerabilityTitle } from './VulnerabilityTitle';

interface VulnerabilityRowProps {
  item: VulnerabilityItem;
  providerName: string;
  rowIndex: number;
}

export const VulnerabilityRow: React.FC<VulnerabilityRowProps> = ({item, providerName, rowIndex}) => {
  let ids;
  if (item.vulnerability.cves && item.vulnerability.cves.length > 0) {
    ids = item.vulnerability.cves;
  } else {
    ids = [item.vulnerability.id];
  }
  const privateIssueHelper = usePrivateIssueHelper();
  const isHidden = privateIssueHelper.hideIssue(providerName, item.vulnerability.unique);
  const appContext = useAppContext();
  return (
    <Tr key={rowIndex}>
      {isHidden ? (
        <>
          <Td colSpan={3}>
            <a href={appContext.snykSignup} target="_blank" rel="noreferrer">
              Sign up for a Snyk account to learn about the vulnerabilities found
            </a>
          </Td>
        </>
      ) : (
        <>
          <Td>
            {ids.map((id, index) => (
              <p key={index}><VulnerabilityIdLink id={id}/></p>
            ))}
          </Td>
          <Td><VulnerabilityTitle title={item.vulnerability.title}/></Td>
          <Td noPadding>
            <VulnerabilitySeverityLabel vulnerability={item.vulnerability}/>
          </Td>
        </>
      )}
      <Td>
        <VulnerabilityScore vulnerability={item.vulnerability}/>
      </Td>
      <Td>
        <DependencyLink name={item.dependencyRef} showVersion={true}/>
      </Td>
      <Td>
        {
          item.vulnerability.remediation?.trustedContent ? (
            <RemediationLink
              key={rowIndex}
              cves={item.vulnerability.cves || []}
              packageName={item.vulnerability.remediation?.trustedContent?.ref}
            />
          ) : item.vulnerability.remediation?.fixedIn ? (
            <VulnerabilityLink sourceName={providerName} vulnerability={item.vulnerability}/>
          ) : !hasRemediations(item.vulnerability) ? (
            // no remediations
            <span></span>
          ) : null
        }
      </Td>
    </Tr>
  );
};
